/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Harl_explanation.hpp                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kanahash <kanahash@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/24 14:47:35 by kanahash          #+#    #+#             */
/*   Updated: 2025/07/24 14:47:39 by kanahash         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef HARL_HPP // ヘッダーガードの開始: HARL_HPPがまだ定義されていない場合、このブロックをコンパイルします。
                 // これにより、同じヘッダーファイルが複数回インクルードされることによる重複定義エラーを防ぎます。
# define HARL_HPP // HARL_HPPを定義します。これにより、次回このファイルがインクルードされたときに、
                  // 上記の#ifndefチェックが失敗し、ファイルの内容がスキップされます。

# include <iostream> // 標準入出力ストリームライブラリをインクルードします。
                     // 主にstd::cout (標準出力) や std::endl (改行とフラッシュ) のために使用します。
# include <string>   // std::stringクラスを使用するために、文字列ライブラリをインクルードします。

// Harlクラスの定義
// このクラスは、異なるログレベルに対応するHarlの不平メッセージを管理します。
class Harl
{
    private: // プライベートセクション: これらのメンバーはクラスの内部からのみアクセス可能です。
             // 外部からは直接呼び出すことはできません。
        void debug(void);   // デバッグレベルのメッセージを表示するメソッド。
        void info(void);    // 情報レベルのメッセージを表示するメソッド。
        void warning(void); // 警告レベルのメッセージを表示するメソッド。
        void error(void);   // エラーレベルのメッセージを表示するメソッド。

    public: // パブリックセクション: これらのメンバーはクラスの外部からアクセス可能です。
            // Harlオブジェクトを作成したり、そのメソッドを呼び出したりするために使用されます。
        Harl();         // コンストラクタ: Harlオブジェクトが作成されるときに呼び出されます。
                        // ここでオブジェクトの初期化を行います。
        ~Harl();        // デストラクタ: Harlオブジェクトが破棄されるときに呼び出されます。
                        // ここでリソースの解放など、クリーンアップを行います。
        void complain(std::string level); // Harlの不平を言う主要なメソッド。
                                          // 引数としてログレベル（文字列）を受け取り、
                                          // そのレベルに応じたメッセージ、またはそれ以上のレベルのメッセージを表示します。
};

#endif // ヘッダーガードの終了: #ifndef HARL_HPPに対応します。
