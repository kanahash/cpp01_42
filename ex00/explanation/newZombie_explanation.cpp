/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   newZombie_explanation.cpp                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kanahash <kanahash@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/16 00:31:56 by kanahash          #+#    #+#             */
/*   Updated: 2025/07/16 00:34:10 by kanahash         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Zombie.hpp" // Zombieクラスの定義（Zombie.hpp）をインクルードします。
                      // これにより、Zombieクラスのコンストラクタが利用可能になります。

// newZombie関数は、新しいZombieオブジェクトをヒープメモリに作成し、そのポインタを返します。
// std::string name: 作成するゾンビに与える名前です。
Zombie* newZombie(std::string name)
{
    // ここがこの関数の核心です。
    // 'new' 演算子を使って、ヒープ（動的メモリ領域）に新しいZombieオブジェクトを作成します。
    //
    // 【ヒープとは？】
    // ヒープは、プログラムが実行されている間に動的にメモリを確保・解放できる、大きなメモリプールのようなものです。
    // スタックメモリ（関数内のローカル変数などに使われる）とは異なり、関数のスコープを抜けても自動的に解放されません。
    // そのため、オブジェクトの寿命をプログラム全体で管理したい場合に利用します。
    //
    // この際、引数 'name' を使ってZombieのコンストラクタが呼び出され、ゾンビが初期化されます。
    // 例: "New Zombie : created." のようなメッセージがここ（コンストラクタ内）で出力されるはずです。
    //
    // 作成されたZombieオブジェクトのアドレス（ポインタ）が 'newZombie' というポインタ変数に代入されます。
    // 【なぜポインタが必要なのか？】
    // 'new' でヒープに作られたオブジェクトは、その名前を直接使うことはできません。
    // そのオブジェクトがメモリ上のどこにあるかを示す「住所」（メモリ番地）を保持する「ポインタ」を通じてのみ、
    // アクセスすることができます。ポインタは、そのオブジェクトへの「参照」または「ハンドル」のようなものです。
    Zombie *newZombie = new Zombie(name);

    // ヒープに作成したZombieオブジェクトへのポインタを呼び出し元に返します。
    // このポインタを介して、呼び出し元はZombieオブジェクトにアクセスできます。
    // IMPORTANT: ヒープに割り当てられたメモリは、使い終わったら必ず 'delete' を使って手動で解放する必要があります。
    return(newZombie);
}
