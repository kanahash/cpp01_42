/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Weapon_explanation.cpp                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kanahash <kanahash@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/17 00:46:25 by kanahash          #+#    #+#             */
/*   Updated: 2025/07/17 00:46:27 by kanahash         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Weapon.hpp" // Weaponクラスの定義が含まれるヘッダーファイルをインクルードします。
                      // これにより、このソースファイルがWeaponクラスの実装を提供することを示します。

// デフォルトコンストラクターです。
// 引数がないWeaponオブジェクトが作成されるときに呼び出されます。
// 初期化リスト（: type("unarmed")）を使って、メンバー変数'type'を"unarmed"（非武装）に初期化します。
// これは、武器が指定されない場合にデフォルトの状態を設定するためです。
Weapon::Weapon(void) : type("unarmed")
{
    // コンストラクターの本体は空ですが、必要であればここで追加の初期化ロジックを記述できます。
}

// 引数付きコンストラクターです。
// 武器のタイプ（種類）を指定してWeaponオブジェクトを作成するときに呼び出されます。
// 引数としてstd::string型の'type'を受け取ります。
// 初期化リスト（: type(type)）を使って、メンバー変数'type'を引数で渡された値に初期化します。
Weapon::Weapon(std::string type) : type(type)
{
    // コンストラクターの本体は空ですが、必要であればここで追加の初期化ロジックを記述できます。
}

// デストラクターです。
// Weaponオブジェクトが破棄されるときに呼び出されます。
// ここでは特別なクリーンアップ（例えば、動的に確保されたメモリの解放など）は必要ないため、本体は空です。
Weapon::~Weapon(void)
{
}

// getTypeメソッドは、武器のタイプ（種類）を取得するために使用されます。
// 'const std::string&'は、このメソッドがstringへの定数参照を返すことを意味します。
// 定数参照を返すことで、不要なコピーを避けつつ、返された文字列がこのメソッド内で変更されないことを保証します。
// 'const'は、このメソッドがオブジェクトのメンバー変数を変更しないことを保証します。
const std::string& Weapon::getType() const
{
    // メンバー変数'type'への定数参照を返します。
    return(this->type);
}

// setTypeメソッドは、武器のタイプを変更するために使用されます。
// 引数として、新しいタイプを示すconst std::string& newTypeを受け取ります。
// 'const std::string&'を使用することで、引数の文字列がコピーされるのを防ぎ、効率的です。
void Weapon::setType(const std::string& newType)
{
    // メンバー変数'type'に新しいタイプを代入します。
    this->type = newType;
}
