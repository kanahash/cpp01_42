#ifndef HARL_HPP // ヘッダーガードの開始: HARL_HPPがまだ定義されていなければ、以下のコードをコンパイルする
#define HARL_HPP // HARL_HPPを定義する。これにより、このファイルが複数回インクルードされるのを防ぐ

#include <iostream> // 標準入出力ストリーム（std::cout, std::endlなど）を使用するために必要
#include <string>   // std::stringクラスを使用するために必要

// Harlクラスの定義
// このクラスは、Harlというキャラクターが様々なレベルで「文句を言う」動作をシミュレートする
class Harl
{
    private: // これらのメンバー関数はクラスの内部からのみアクセス可能
        // デバッグレベルのメッセージを出力する関数
        // 主に開発時の詳細な情報や問題診断のために使われる
        void debug(void);
        // 情報レベルのメッセージを出力する関数
        // プログラムの一般的な進行状況や重要なイベントを示すために使われる
        void info(void);
        // 警告レベルのメッセージを出力する関数
        // 潜在的な問題や注意を要する状況を示すが、通常は処理を中断しない
        void warning(void);
        // エラーレベルのメッセージを出力する関数
        // 回復不能なエラーや重大な問題を示し、通常は手動での介入が必要
        void error(void);

    public: // これらのメンバー関数はクラスの外部からアクセス可能
        // Harlクラスのコンストラクタ
        // Harlオブジェクトが作成される際に自動的に呼び出される
        Harl();
        // Harlクラスのデストラクタ
        // Harlオブジェクトが破棄される際に自動的に呼び出される
        ~Harl();
        // Harlに指定されたレベルで文句を言わせる公開インターフェース
        // 引数として"DEBUG", "INFO", "WARNING", "ERROR"などの文字列を受け取る
        // 内部的には、if/else if/else を使用せず、メンバー関数へのポインタを使って
        // 対応するプライベートな文句関数（debug, infoなど）を呼び出す
        void complain(std::string level);
};

#endif // ヘッダーガードの終了
